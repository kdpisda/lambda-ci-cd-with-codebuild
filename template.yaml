AWSTemplateFormatVersion: '2010-09-09'
Description: Setup API Gateway with Lambda integration for POST request

Resources:
  PreSignedUrlGeneratorAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PreSignedUrlGeneratorAPI
      ProtocolType: HTTP

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/PreSignedUrlGeneratorAPI

  PreSignedUrlGeneratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PreSignedUrlGeneratorExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::kd-freelancing/*"

  PreSignedUrlGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PreSignedUrlGeneratorFunction
      Runtime: python3.8
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PreSignedUrlGeneratorExecutionRole.Arn
      Code:
        S3Bucket: kd-freelancing
        S3Key: lambdas/presigned-url-function.zip
        S3ObjectVersion: "{{resolve:ssm:LambdaVersion_presigned-url-function}}"

  PreSignedUrlGeneratorFunctionExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PreSignedUrlGeneratorFunctionExecutionPolicy
      Roles:
        - !Ref PreSignedUrlGeneratorExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"

  APIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PreSignedUrlGeneratorAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreSignedUrlGeneratorFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  APIRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PreSignedUrlGeneratorAPI
      RouteKey: 'POST /files'
      Target: !Sub integrations/${APIIntegration}

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Production Stage
      ApiId: !Ref PreSignedUrlGeneratorAPI
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogGroup.Arn  # Reference the CloudWatch Logs group ARN
        Format: '{"requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status"}'

  APIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref PreSignedUrlGeneratorAPI

Outputs:
  ApiUrl:
    Description: URL of the created API
    Value: !Sub "https://${PreSignedUrlGeneratorAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/files/"
